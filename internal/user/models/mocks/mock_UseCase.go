// Code generated by mockery v2.53.3. DO NOT EDIT.

package models_mocks

import (
	context "context"

	models "github.com/rubemlrm/go-api-bootstrap/internal/user/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx
func (_m *MockUseCase) All(ctx context.Context) (*[]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 *[]models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockUseCase_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUseCase_Expecter) All(ctx interface{}) *MockUseCase_All_Call {
	return &MockUseCase_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *MockUseCase_All_Call) Run(run func(ctx context.Context)) *MockUseCase_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUseCase_All_Call) Return(_a0 *[]models.User, _a1 error) *MockUseCase_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_All_Call) RunAndReturn(run func(context.Context) (*[]models.User, error)) *MockUseCase_All_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUseCase) Create(ctx context.Context, user *models.UserCreate) (models.ID, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreate) (models.ID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreate) models.ID); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserCreate) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.UserCreate
func (_e *MockUseCase_Expecter) Create(ctx interface{}, user interface{}) *MockUseCase_Create_Call {
	return &MockUseCase_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUseCase_Create_Call) Run(run func(ctx context.Context, user *models.UserCreate)) *MockUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserCreate))
	})
	return _c
}

func (_c *MockUseCase_Create_Call) Return(_a0 models.ID, _a1 error) *MockUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Create_Call) RunAndReturn(run func(context.Context, *models.UserCreate) (models.ID, error)) *MockUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUseCase) Get(ctx context.Context, id models.ID) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUseCase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.ID
func (_e *MockUseCase_Expecter) Get(ctx interface{}, id interface{}) *MockUseCase_Get_Call {
	return &MockUseCase_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUseCase_Get_Call) Run(run func(ctx context.Context, id models.ID)) *MockUseCase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ID))
	})
	return _c
}

func (_c *MockUseCase_Get_Call) Return(_a0 *models.User, _a1 error) *MockUseCase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Get_Call) RunAndReturn(run func(context.Context, models.ID) (*models.User, error)) *MockUseCase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
