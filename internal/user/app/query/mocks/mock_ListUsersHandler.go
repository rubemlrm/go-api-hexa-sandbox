// Code generated by mockery v2.53.3. DO NOT EDIT.

package query_mocks

import (
	context "context"

	query "github.com/rubemlrm/go-api-bootstrap/internal/user/app/query"
	mock "github.com/stretchr/testify/mock"

	user "github.com/rubemlrm/go-api-bootstrap/internal/user/domain/user"
)

// MockListUsersHandler is an autogenerated mock type for the ListUsersHandler type
type MockListUsersHandler struct {
	mock.Mock
}

type MockListUsersHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListUsersHandler) EXPECT() *MockListUsersHandler_Expecter {
	return &MockListUsersHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, q
func (_m *MockListUsersHandler) Handle(ctx context.Context, q query.UserSearchFilters) (*[]user.User, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *[]user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.UserSearchFilters) (*[]user.User, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.UserSearchFilters) *[]user.User); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.UserSearchFilters) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListUsersHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockListUsersHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - q query.UserSearchFilters
func (_e *MockListUsersHandler_Expecter) Handle(ctx interface{}, q interface{}) *MockListUsersHandler_Handle_Call {
	return &MockListUsersHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, q)}
}

func (_c *MockListUsersHandler_Handle_Call) Run(run func(ctx context.Context, q query.UserSearchFilters)) *MockListUsersHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.UserSearchFilters))
	})
	return _c
}

func (_c *MockListUsersHandler_Handle_Call) Return(_a0 *[]user.User, _a1 error) *MockListUsersHandler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListUsersHandler_Handle_Call) RunAndReturn(run func(context.Context, query.UserSearchFilters) (*[]user.User, error)) *MockListUsersHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListUsersHandler creates a new instance of MockListUsersHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListUsersHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListUsersHandler {
	mock := &MockListUsersHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
