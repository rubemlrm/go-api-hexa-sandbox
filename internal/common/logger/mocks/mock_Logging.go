// Code generated by mockery v2.31.0. DO NOT EDIT.

package logger_mocks

import (
	config "github.com/rubemlrm/go-api-bootstrap/internal/common/config"

	mock "github.com/stretchr/testify/mock"

	slog "golang.org/x/exp/slog"
)

// MockLogging is an autogenerated mock type for the Logging type
type MockLogging struct {
	mock.Mock
}

type MockLogging_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogging) EXPECT() *MockLogging_Expecter {
	return &MockLogging_Expecter{mock: &_m.Mock}
}

// NewLogger provides a mock function with given fields: cfg
func (_m *MockLogging) NewLogger(cfg config.Logger) *slog.Logger {
	ret := _m.Called(cfg)

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func(config.Logger) *slog.Logger); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// MockLogging_NewLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewLogger'
type MockLogging_NewLogger_Call struct {
	*mock.Call
}

// NewLogger is a helper method to define mock.On call
//   - cfg config.Logger
func (_e *MockLogging_Expecter) NewLogger(cfg interface{}) *MockLogging_NewLogger_Call {
	return &MockLogging_NewLogger_Call{Call: _e.mock.On("NewLogger", cfg)}
}

func (_c *MockLogging_NewLogger_Call) Run(run func(cfg config.Logger)) *MockLogging_NewLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Logger))
	})
	return _c
}

func (_c *MockLogging_NewLogger_Call) Return(_a0 *slog.Logger) *MockLogging_NewLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogging_NewLogger_Call) RunAndReturn(run func(config.Logger) *slog.Logger) *MockLogging_NewLogger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogging creates a new instance of MockLogging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogging(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogging {
	mock := &MockLogging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
