// Code generated by mockery v2.53.3. DO NOT EDIT.

package decorator_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommandHandler is an autogenerated mock type for the CommandHandler type
type MockCommandHandler[C interface{}] struct {
	mock.Mock
}

type MockCommandHandler_Expecter[C interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCommandHandler[C]) EXPECT() *MockCommandHandler_Expecter[C] {
	return &MockCommandHandler_Expecter[C]{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, cmd
func (_m *MockCommandHandler[C]) Handle(ctx context.Context, cmd C) (C, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 C
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, C) (C, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, C) C); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(C)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, C) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockCommandHandler_Handle_Call[C interface{}] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd C
func (_e *MockCommandHandler_Expecter[C]) Handle(ctx interface{}, cmd interface{}) *MockCommandHandler_Handle_Call[C] {
	return &MockCommandHandler_Handle_Call[C]{Call: _e.mock.On("Handle", ctx, cmd)}
}

func (_c *MockCommandHandler_Handle_Call[C]) Run(run func(ctx context.Context, cmd C)) *MockCommandHandler_Handle_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(C))
	})
	return _c
}

func (_c *MockCommandHandler_Handle_Call[C]) Return(_a0 C, _a1 error) *MockCommandHandler_Handle_Call[C] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandHandler_Handle_Call[C]) RunAndReturn(run func(context.Context, C) (C, error)) *MockCommandHandler_Handle_Call[C] {
	_c.Call.Return(run)
	return _c
}

// NewMockCommandHandler creates a new instance of MockCommandHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandHandler[C interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandHandler[C] {
	mock := &MockCommandHandler[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
