// Code generated by mockery v2.53.3. DO NOT EDIT.

package decorator_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryHandler is an autogenerated mock type for the QueryHandler type
type MockQueryHandler[Q interface{}, R interface{}] struct {
	mock.Mock
}

type MockQueryHandler_Expecter[Q interface{}, R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockQueryHandler[Q, R]) EXPECT() *MockQueryHandler_Expecter[Q, R] {
	return &MockQueryHandler_Expecter[Q, R]{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, q
func (_m *MockQueryHandler[Q, R]) Handle(ctx context.Context, q Q) (R, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Q) (R, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Q) R); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(R)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Q) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockQueryHandler_Handle_Call[Q interface{}, R interface{}] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - q Q
func (_e *MockQueryHandler_Expecter[Q, R]) Handle(ctx interface{}, q interface{}) *MockQueryHandler_Handle_Call[Q, R] {
	return &MockQueryHandler_Handle_Call[Q, R]{Call: _e.mock.On("Handle", ctx, q)}
}

func (_c *MockQueryHandler_Handle_Call[Q, R]) Run(run func(ctx context.Context, q Q)) *MockQueryHandler_Handle_Call[Q, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Q))
	})
	return _c
}

func (_c *MockQueryHandler_Handle_Call[Q, R]) Return(_a0 R, _a1 error) *MockQueryHandler_Handle_Call[Q, R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryHandler_Handle_Call[Q, R]) RunAndReturn(run func(context.Context, Q) (R, error)) *MockQueryHandler_Handle_Call[Q, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryHandler creates a new instance of MockQueryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryHandler[Q interface{}, R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryHandler[Q, R] {
	mock := &MockQueryHandler[Q, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
